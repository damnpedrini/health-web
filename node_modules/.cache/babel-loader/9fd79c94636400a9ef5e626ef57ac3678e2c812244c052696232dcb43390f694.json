{"ast":null,"code":"import _objectSpread from \"C:/Users/Rafael/Desktop/health-web/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.object.to-string.js\";\n/* eslint-disable */\n\nvar openDB = function openDB(dbName, storeName) {\n  return new Promise(function (resolve, reject) {\n    var request = indexedDB.open(dbName, 1);\n    request.onerror = function () {\n      reject(\"Erro ao abrir o banco de dados \".concat(dbName));\n    };\n    request.onupgradeneeded = function (event) {\n      var db = event.target.result;\n      if (!db.objectStoreNames.contains(storeName)) {\n        db.createObjectStore(storeName, {\n          keyPath: \"id\",\n          autoIncrement: true\n        });\n      }\n    };\n    request.onsuccess = function (event) {\n      var db = event.target.result;\n      resolve(db);\n    };\n  });\n};\nvar getAllNotes = function getAllNotes(dbName, storeName) {\n  return openDB(dbName, storeName).then(function (db) {\n    return new Promise(function (resolve, reject) {\n      var transaction = db.transaction(storeName, \"readonly\");\n      var store = transaction.objectStore(storeName);\n      var request = store.getAll();\n      request.onerror = function () {\n        reject(\"Erro ao obter notas do banco de dados \".concat(dbName));\n      };\n      request.onsuccess = function (event) {\n        resolve(request.result);\n      };\n    });\n  });\n};\nvar getNote = function getNote(dbName, storeName, noteId) {\n  return openDB(dbName, storeName).then(function (db) {\n    return new Promise(function (resolve, reject) {\n      var transaction = db.transaction(storeName, \"readonly\");\n      var store = transaction.objectStore(storeName);\n      var request = store.get(noteId);\n      request.onerror = function () {\n        reject(\"Erro ao obter nota do banco de dados \".concat(dbName));\n      };\n      request.onsuccess = function (event) {\n        resolve(request.result);\n      };\n    });\n  });\n};\nvar addNote = function addNote(dbName, storeName, note) {\n  return openDB(dbName, storeName).then(function (db) {\n    return new Promise(function (resolve, reject) {\n      var transaction = db.transaction(storeName, \"readwrite\");\n      var store = transaction.objectStore(storeName);\n      var request = store.add(note);\n      request.onerror = function () {\n        reject(\"Erro ao adicionar nota ao banco de dados \".concat(dbName));\n      };\n      request.onsuccess = function (event) {\n        resolve(request.result);\n      };\n    });\n  });\n};\nvar updateNote = function updateNote(dbName, storeName, noteId, updatedData) {\n  return openDB(dbName, storeName).then(function (db) {\n    return new Promise(function (resolve, reject) {\n      var transaction = db.transaction(storeName, \"readwrite\");\n      var store = transaction.objectStore(storeName);\n      var request = store.put(_objectSpread(_objectSpread({}, updatedData), {}, {\n        id: noteId\n      }));\n      request.onerror = function () {\n        reject(\"Erro ao atualizar nota no banco de dados \".concat(dbName));\n      };\n      request.onsuccess = function (event) {\n        resolve(request.result);\n      };\n    });\n  });\n};\nvar deleteNote = function deleteNote(dbName, storeName, noteId) {\n  return openDB(dbName, storeName).then(function (db) {\n    return new Promise(function (resolve, reject) {\n      var transaction = db.transaction(storeName, \"readwrite\");\n      var store = transaction.objectStore(storeName);\n      var request = store.delete(noteId);\n      request.onerror = function () {\n        reject(\"Erro ao excluir nota do banco de dados \".concat(dbName));\n      };\n      request.onsuccess = function (event) {\n        resolve(request.result);\n      };\n    });\n  });\n};\nexport { openDB, getAllNotes, getNote, addNote, updateNote, deleteNote };","map":{"version":3,"names":["openDB","dbName","storeName","Promise","resolve","reject","request","indexedDB","open","onerror","concat","onupgradeneeded","event","db","target","result","objectStoreNames","contains","createObjectStore","keyPath","autoIncrement","onsuccess","getAllNotes","then","transaction","store","objectStore","getAll","getNote","noteId","get","addNote","note","add","updateNote","updatedData","put","_objectSpread","id","deleteNote","delete"],"sources":["C:/Users/Rafael/Desktop/health-web/src/indexdb.js"],"sourcesContent":["/* eslint-disable */\r\n\r\nconst openDB = (dbName, storeName) => {\r\n  return new Promise((resolve, reject) => {\r\n    const request = indexedDB.open(dbName, 1);\r\n\r\n    request.onerror = () => {\r\n      reject(`Erro ao abrir o banco de dados ${dbName}`);\r\n    };\r\n\r\n    request.onupgradeneeded = (event) => {\r\n      const db = event.target.result;\r\n\r\n      if (!db.objectStoreNames.contains(storeName)) {\r\n        db.createObjectStore(storeName, { keyPath: \"id\", autoIncrement: true });\r\n      }\r\n    };\r\n\r\n    request.onsuccess = (event) => {\r\n      const db = event.target.result;\r\n      resolve(db);\r\n    };\r\n  });\r\n};\r\n\r\nconst getAllNotes = (dbName, storeName) => {\r\n  return openDB(dbName, storeName).then((db) => {\r\n    return new Promise((resolve, reject) => {\r\n      const transaction = db.transaction(storeName, \"readonly\");\r\n      const store = transaction.objectStore(storeName);\r\n\r\n      const request = store.getAll();\r\n\r\n      request.onerror = () => {\r\n        reject(`Erro ao obter notas do banco de dados ${dbName}`);\r\n      };\r\n\r\n      request.onsuccess = (event) => {\r\n        resolve(request.result);\r\n      };\r\n    });\r\n  });\r\n};\r\n\r\nconst getNote = (dbName, storeName, noteId) => {\r\n  return openDB(dbName, storeName).then((db) => {\r\n    return new Promise((resolve, reject) => {\r\n      const transaction = db.transaction(storeName, \"readonly\");\r\n      const store = transaction.objectStore(storeName);\r\n\r\n      const request = store.get(noteId);\r\n\r\n      request.onerror = () => {\r\n        reject(`Erro ao obter nota do banco de dados ${dbName}`);\r\n      };\r\n\r\n      request.onsuccess = (event) => {\r\n        resolve(request.result);\r\n      };\r\n    });\r\n  });\r\n};\r\n\r\nconst addNote = (dbName, storeName, note) => {\r\n  return openDB(dbName, storeName).then((db) => {\r\n    return new Promise((resolve, reject) => {\r\n      const transaction = db.transaction(storeName, \"readwrite\");\r\n      const store = transaction.objectStore(storeName);\r\n\r\n      const request = store.add(note);\r\n\r\n      request.onerror = () => {\r\n        reject(`Erro ao adicionar nota ao banco de dados ${dbName}`);\r\n      };\r\n\r\n      request.onsuccess = (event) => {\r\n        resolve(request.result);\r\n      };\r\n    });\r\n  });\r\n};\r\n\r\nconst updateNote = (dbName, storeName, noteId, updatedData) => {\r\n  return openDB(dbName, storeName).then((db) => {\r\n    return new Promise((resolve, reject) => {\r\n      const transaction = db.transaction(storeName, \"readwrite\");\r\n      const store = transaction.objectStore(storeName);\r\n\r\n      const request = store.put({ ...updatedData, id: noteId });\r\n\r\n      request.onerror = () => {\r\n        reject(`Erro ao atualizar nota no banco de dados ${dbName}`);\r\n      };\r\n\r\n      request.onsuccess = (event) => {\r\n        resolve(request.result);\r\n      };\r\n    });\r\n  });\r\n};\r\n\r\nconst deleteNote = (dbName, storeName, noteId) => {\r\n  return openDB(dbName, storeName).then((db) => {\r\n    return new Promise((resolve, reject) => {\r\n      const transaction = db.transaction(storeName, \"readwrite\");\r\n      const store = transaction.objectStore(storeName);\r\n\r\n      const request = store.delete(noteId);\r\n\r\n      request.onerror = () => {\r\n        reject(`Erro ao excluir nota do banco de dados ${dbName}`);\r\n      };\r\n\r\n      request.onsuccess = (event) => {\r\n        resolve(request.result);\r\n      };\r\n    });\r\n  });\r\n};\r\n\r\nexport { openDB, getAllNotes, getNote, addNote, updateNote, deleteNote };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}