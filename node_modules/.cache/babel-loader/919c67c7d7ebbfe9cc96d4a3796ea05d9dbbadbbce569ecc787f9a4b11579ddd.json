{"ast":null,"code":"/* eslint-disable */\n\nconst openDB = (dbName, storeName) => {\n  return new Promise((resolve, reject) => {\n    const request = indexedDB.open(dbName, 1);\n    request.onerror = () => {\n      reject(`Erro ao abrir o banco de dados ${dbName}`);\n    };\n    request.onupgradeneeded = event => {\n      const db = event.target.result;\n      if (!db.objectStoreNames.contains(storeName)) {\n        db.createObjectStore(storeName, {\n          keyPath: \"id\",\n          autoIncrement: true\n        });\n      }\n    };\n    request.onsuccess = event => {\n      const db = event.target.result;\n      resolve(db);\n    };\n  });\n};\nconst getAllNotes = (dbName, storeName) => {\n  return openDB(dbName, storeName).then(db => {\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction(storeName, \"readonly\");\n      const store = transaction.objectStore(storeName);\n      const request = store.getAll();\n      request.onerror = () => {\n        reject(`Erro ao obter notas do banco de dados ${dbName}`);\n      };\n      request.onsuccess = event => {\n        resolve(request.result);\n      };\n    });\n  });\n};\nconst getNote = (dbName, storeName, noteId) => {\n  return openDB(dbName, storeName).then(db => {\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction(storeName, \"readonly\");\n      const store = transaction.objectStore(storeName);\n      const request = store.get(noteId);\n      request.onerror = () => {\n        reject(`Erro ao obter nota do banco de dados ${dbName}`);\n      };\n      request.onsuccess = event => {\n        resolve(request.result);\n      };\n    });\n  });\n};\nconst addNote = (dbName, storeName, note) => {\n  return openDB(dbName, storeName).then(db => {\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction(storeName, \"readwrite\");\n      const store = transaction.objectStore(storeName);\n      const request = store.add(note);\n      request.onerror = () => {\n        reject(`Erro ao adicionar nota ao banco de dados ${dbName}`);\n      };\n      request.onsuccess = event => {\n        resolve(request.result);\n      };\n    });\n  });\n};\nconst updateNote = (dbName, storeName, noteId, updatedData) => {\n  return openDB(dbName, storeName).then(db => {\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction(storeName, \"readwrite\");\n      const store = transaction.objectStore(storeName);\n      const request = store.put({\n        ...updatedData,\n        id: noteId\n      });\n      request.onerror = () => {\n        reject(`Erro ao atualizar nota no banco de dados ${dbName}`);\n      };\n      request.onsuccess = event => {\n        resolve(request.result);\n      };\n    });\n  });\n};\nconst deleteNote = (dbName, storeName, noteId) => {\n  return openDB(dbName, storeName).then(db => {\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction(storeName, \"readwrite\");\n      const store = transaction.objectStore(storeName);\n      const request = store.delete(noteId);\n      request.onerror = () => {\n        reject(`Erro ao excluir nota do banco de dados ${dbName}`);\n      };\n      request.onsuccess = event => {\n        resolve(request.result);\n      };\n    });\n  });\n};\nexport { openDB, getAllNotes, getNote, addNote, updateNote, deleteNote };","map":{"version":3,"names":["openDB","dbName","storeName","Promise","resolve","reject","request","indexedDB","open","onerror","onupgradeneeded","event","db","target","result","objectStoreNames","contains","createObjectStore","keyPath","autoIncrement","onsuccess","getAllNotes","then","transaction","store","objectStore","getAll","getNote","noteId","get","addNote","note","add","updateNote","updatedData","put","id","deleteNote","delete"],"sources":["/home/pedrini/Documentos/BLOCO-DE-ANOTACOES/src/indexdb.js"],"sourcesContent":["/* eslint-disable */\n\nconst openDB = (dbName, storeName) => {\n  return new Promise((resolve, reject) => {\n    const request = indexedDB.open(dbName, 1);\n\n    request.onerror = () => {\n      reject(`Erro ao abrir o banco de dados ${dbName}`);\n    };\n\n    request.onupgradeneeded = (event) => {\n      const db = event.target.result;\n\n      if (!db.objectStoreNames.contains(storeName)) {\n        db.createObjectStore(storeName, { keyPath: \"id\", autoIncrement: true });\n      }\n    };\n\n    request.onsuccess = (event) => {\n      const db = event.target.result;\n      resolve(db);\n    };\n  });\n};\n\nconst getAllNotes = (dbName, storeName) => {\n  return openDB(dbName, storeName).then((db) => {\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction(storeName, \"readonly\");\n      const store = transaction.objectStore(storeName);\n\n      const request = store.getAll();\n\n      request.onerror = () => {\n        reject(`Erro ao obter notas do banco de dados ${dbName}`);\n      };\n\n      request.onsuccess = (event) => {\n        resolve(request.result);\n      };\n    });\n  });\n};\n\nconst getNote = (dbName, storeName, noteId) => {\n  return openDB(dbName, storeName).then((db) => {\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction(storeName, \"readonly\");\n      const store = transaction.objectStore(storeName);\n\n      const request = store.get(noteId);\n\n      request.onerror = () => {\n        reject(`Erro ao obter nota do banco de dados ${dbName}`);\n      };\n\n      request.onsuccess = (event) => {\n        resolve(request.result);\n      };\n    });\n  });\n};\n\nconst addNote = (dbName, storeName, note) => {\n  return openDB(dbName, storeName).then((db) => {\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction(storeName, \"readwrite\");\n      const store = transaction.objectStore(storeName);\n\n      const request = store.add(note);\n\n      request.onerror = () => {\n        reject(`Erro ao adicionar nota ao banco de dados ${dbName}`);\n      };\n\n      request.onsuccess = (event) => {\n        resolve(request.result);\n      };\n    });\n  });\n};\n\nconst updateNote = (dbName, storeName, noteId, updatedData) => {\n  return openDB(dbName, storeName).then((db) => {\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction(storeName, \"readwrite\");\n      const store = transaction.objectStore(storeName);\n\n      const request = store.put({ ...updatedData, id: noteId });\n\n      request.onerror = () => {\n        reject(`Erro ao atualizar nota no banco de dados ${dbName}`);\n      };\n\n      request.onsuccess = (event) => {\n        resolve(request.result);\n      };\n    });\n  });\n};\n\nconst deleteNote = (dbName, storeName, noteId) => {\n  return openDB(dbName, storeName).then((db) => {\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction(storeName, \"readwrite\");\n      const store = transaction.objectStore(storeName);\n\n      const request = store.delete(noteId);\n\n      request.onerror = () => {\n        reject(`Erro ao excluir nota do banco de dados ${dbName}`);\n      };\n\n      request.onsuccess = (event) => {\n        resolve(request.result);\n      };\n    });\n  });\n};\n\nexport { openDB, getAllNotes, getNote, addNote, updateNote, deleteNote };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}