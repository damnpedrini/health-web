{"ast":null,"code":"import \"core-js/modules/es.number.to-fixed.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.string.includes.js\";\nexport default {\n  data: function data() {\n    return {\n      altura: \"\",\n      peso: 0,\n      resultado: \"\"\n    };\n  },\n  methods: {\n    calcularIMC: function calcularIMC() {\n      var alturaMetros = this.converterAlturaParaMetros(this.altura);\n      var imc = this.peso / (alturaMetros * alturaMetros);\n      if (imc < 18.5) {\n        this.resultado = \"Seu IMC \\xE9 \".concat(imc.toFixed(2), \", voc\\xEA est\\xE1 abaixo do peso.\");\n      } else if (imc < 25) {\n        this.resultado = \"Seu IMC \\xE9 \".concat(imc.toFixed(2), \", seu peso est\\xE1 normal.\");\n      } else if (imc < 30) {\n        this.resultado = \"Seu IMC \\xE9 \".concat(imc.toFixed(2), \", voc\\xEA est\\xE1 acima do peso.\");\n      } else {\n        this.resultado = \"Seu IMC \\xE9 \".concat(imc.toFixed(2), \", voc\\xEA est\\xE1 obeso.\");\n      }\n    },\n    converterAlturaParaMetros: function converterAlturaParaMetros(altura) {\n      var partesAltura = altura.split(\",\");\n      var metros = parseFloat(partesAltura[0]);\n      var centimetros = partesAltura[1] ? parseFloat(partesAltura[1]) : 0;\n      return metros + centimetros / 100;\n    },\n    formatarAltura: function formatarAltura() {\n      if (this.altura.length === 1 && !this.altura.includes(',')) {\n        this.altura += \",\";\n      }\n    }\n  }\n};","map":{"version":3,"names":["data","altura","peso","resultado","methods","calcularIMC","alturaMetros","converterAlturaParaMetros","imc","concat","toFixed","partesAltura","split","metros","parseFloat","centimetros","formatarAltura","length","includes"],"sources":["src/views/CalculatorPage.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <header class=\"text-center mb-4\">\r\n      <h1 class=\"display-5 text-primary\" style=\"margin-bottom: 0.5em;\">Cálculo do Índice de Massa Corporal</h1>\r\n    </header>\r\n\r\n    <section class=\"mx-auto mt-5 p-4\" style=\"max-width: 400px; text-align: center;\">\r\n      <div class=\"mb-3\">\r\n        <label for=\"txtaltura\" class=\"form-label\">Altura:</label>\r\n        <input v-model=\"altura\" @input=\"formatarAltura\" type=\"text\" class=\"form-control\" id=\"txtaltura\">\r\n      </div>\r\n\r\n      <div class=\"mb-3\">\r\n        <label for=\"txtpeso\" class=\"form-label\">Peso:</label>\r\n        <input v-model=\"peso\" type=\"number\" class=\"form-control\" id=\"txtpeso\" min=\"0\">\r\n      </div>\r\n\r\n      <button @click=\"calcularIMC\" class=\"btn btn-success\">Verificar</button>\r\n    </section>\r\n\r\n    <div id=\"res\" class=\"mt-4 text-center\">\r\n      {{ resultado }}\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      altura: \"\",\r\n      peso: 0,\r\n      resultado: \"\",\r\n    };\r\n  },\r\n  methods: {\r\n    calcularIMC() {\r\n      const alturaMetros = this.converterAlturaParaMetros(this.altura);\r\n      const imc = this.peso / (alturaMetros * alturaMetros);\r\n\r\n      if (imc < 18.5) {\r\n        this.resultado = `Seu IMC é ${imc.toFixed(2)}, você está abaixo do peso.`;\r\n      } else if (imc < 25) {\r\n        this.resultado = `Seu IMC é ${imc.toFixed(2)}, seu peso está normal.`;\r\n      } else if (imc < 30) {\r\n        this.resultado = `Seu IMC é ${imc.toFixed(2)}, você está acima do peso.`;\r\n      } else {\r\n        this.resultado = `Seu IMC é ${imc.toFixed(2)}, você está obeso.`;\r\n      }\r\n    },\r\n    converterAlturaParaMetros(altura) {\r\n      const partesAltura = altura.split(\",\");\r\n      const metros = parseFloat(partesAltura[0]);\r\n      const centimetros = partesAltura[1] ? parseFloat(partesAltura[1]) : 0;\r\n\r\n      return metros + centimetros / 100;\r\n    },\r\n    formatarAltura() {\r\n      if (this.altura.length === 1 && !this.altura.includes(',')) {\r\n        this.altura += \",\";\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\nbody {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  height: 100vh;\r\n  margin: 0;\r\n  background-color: #f8f9fa;\r\n}\r\n\r\nsection {\r\n  background-color: #ffffff;\r\n  padding: 20px;\r\n  border-radius: 10px;\r\n  box-shadow: 0px 0px 10px 0px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n#res {\r\n  margin-top: 20px;\r\n  text-align: center;\r\n  color: #155724;\r\n  background-color: #d4edda;\r\n  padding: 10px;\r\n  border-radius: 5px;\r\n}\r\n\r\n.btn-success {\r\n  background-color: #004d40;\r\n  color: #fff;\r\n  border: none;\r\n  padding: 10px;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n}\r\n\r\n.btn-success:hover {\r\n  background-color: #45a049;\r\n}\r\n</style>\r\n"],"mappings":";;;AA2BA;EACAA,IAAA,WAAAA,KAAA;IACA;MACAC,MAAA;MACAC,IAAA;MACAC,SAAA;IACA;EACA;EACAC,OAAA;IACAC,WAAA,WAAAA,YAAA;MACA,IAAAC,YAAA,QAAAC,yBAAA,MAAAN,MAAA;MACA,IAAAO,GAAA,QAAAN,IAAA,IAAAI,YAAA,GAAAA,YAAA;MAEA,IAAAE,GAAA;QACA,KAAAL,SAAA,mBAAAM,MAAA,CAAAD,GAAA,CAAAE,OAAA;MACA,WAAAF,GAAA;QACA,KAAAL,SAAA,mBAAAM,MAAA,CAAAD,GAAA,CAAAE,OAAA;MACA,WAAAF,GAAA;QACA,KAAAL,SAAA,mBAAAM,MAAA,CAAAD,GAAA,CAAAE,OAAA;MACA;QACA,KAAAP,SAAA,mBAAAM,MAAA,CAAAD,GAAA,CAAAE,OAAA;MACA;IACA;IACAH,yBAAA,WAAAA,0BAAAN,MAAA;MACA,IAAAU,YAAA,GAAAV,MAAA,CAAAW,KAAA;MACA,IAAAC,MAAA,GAAAC,UAAA,CAAAH,YAAA;MACA,IAAAI,WAAA,GAAAJ,YAAA,MAAAG,UAAA,CAAAH,YAAA;MAEA,OAAAE,MAAA,GAAAE,WAAA;IACA;IACAC,cAAA,WAAAA,eAAA;MACA,SAAAf,MAAA,CAAAgB,MAAA,gBAAAhB,MAAA,CAAAiB,QAAA;QACA,KAAAjB,MAAA;MACA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}